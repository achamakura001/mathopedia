"""Update topics grade_level to varchar and improve topic-question relationship

Revision ID: 8c471b49145b
Revises: 6ffad2e996d6
Create Date: 2025-06-30 17:26:41.446209

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '8c471b49145b'
down_revision = '6ffad2e996d6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Drop the unique constraint temporarily
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.drop_constraint('unique_topic_grade', type_='unique')
    
    # Step 2: Add a temporary column
    op.add_column('topics', sa.Column('grade_level_temp', sa.String(50), nullable=True))
    
    # Step 3: Convert existing integer values to strings
    connection = op.get_bind()
    connection.execute(sa.text("UPDATE topics SET grade_level_temp = CAST(grade_level AS CHAR(50))"))
    
    # Step 4: Drop the old column
    op.drop_column('topics', 'grade_level')
    
    # Step 5: Rename the temporary column
    op.alter_column('topics', 'grade_level_temp', new_column_name='grade_level')
    
    # Step 6: Make the column non-nullable
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.alter_column('grade_level',
               existing_type=sa.String(length=50),
               nullable=False)
    
    # Step 7: Recreate the unique constraint
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_topic_grade', ['name', 'grade_level'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Drop the unique constraint temporarily
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.drop_constraint('unique_topic_grade', type_='unique')
    
    # Step 2: Add a temporary column
    op.add_column('topics', sa.Column('grade_level_temp', mysql.INTEGER(), nullable=True))
    
    # Step 3: Convert string values back to integers (only numeric values)
    connection = op.get_bind()
    connection.execute(sa.text("UPDATE topics SET grade_level_temp = CAST(grade_level AS UNSIGNED) WHERE grade_level REGEXP '^[0-9]+$'"))
    
    # Step 4: Drop the old column
    op.drop_column('topics', 'grade_level')
    
    # Step 5: Rename the temporary column
    op.alter_column('topics', 'grade_level_temp', new_column_name='grade_level')
    
    # Step 6: Make the column non-nullable
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.alter_column('grade_level',
               existing_type=mysql.INTEGER(),
               nullable=False)
    
    # Step 7: Recreate the unique constraint
    with op.batch_alter_table('topics', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_topic_grade', ['name', 'grade_level'])

    # ### end Alembic commands ###
